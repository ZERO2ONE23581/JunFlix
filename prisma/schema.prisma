// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"

}
model User {
  id           Int          @id @default(autoincrement())
  username     String 
  userId       String?      @unique
  password     String?  
  email        String?      @unique
  name         String?
  birth        String?
  gender       String?
  location     String?
  avatar       String?
  tokens       Token[]  
  boards       Board[]     
  posts        Post[]
  reviews      Review[]  
  likes        Likes[]  
  following    Following[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Token {
  id           Int         @id @default(autoincrement())
  tokenNum     Int         @unique
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int   
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Board {
  id           Int        @id @default(autoincrement())
  title        String     @unique
  intro        String
  genre        String
  avatar       String?  
  user         User       @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int  
  following    Following[]
  post         Post[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Following {
  id           Int         @id @default(autoincrement()) 
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int
  board        Board       @relation(fields: [BoardID], references: [id], onDelete: Cascade)
  BoardID      Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Post {
  id           Int         @id @default(autoincrement())
  title        String     
  content      String?     @db.LongText
  avatar       String?
  follow       String?
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int   
  board        Board        @relation(fields: [BoardID], references: [id], onDelete: Cascade)
  BoardID      Int
  likes        Likes[]  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Review {
  id           Int        @id @default(autoincrement())
  title        String  
  movieTitle   String
  genre        String
  avatar       String? 
  content      String?     @db.LongText
  score        Int?        @default(1)
  oneline      String?
  recommend    Boolean?    @default(true)
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int
  likes        Likes[]  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Likes {
  id           Int         @id @default(autoincrement()) 
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int
  post         Post?        @relation(fields: [PostID], references: [id], onDelete: Cascade)
  PostID       Int?
  review       Review?        @relation(fields: [ReviewID], references: [id], onDelete: Cascade)
  ReviewID     Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
