// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"

}
model User {
  id               Int          @id @default(autoincrement())
  userId           String       @unique
  email            String       @unique
  password         String  
  username         String? 
  name             String?
  birth            String?
  gender           String?
  location         String?
  avatar           String?
  updatedAt        DateTime     @updatedAt
  createdAt        DateTime     @default(now())
  likes            Like[]  
  posts            Post[]
  tokens           Token[]  
  boards           Board[]     
  reviews          Review[]  
  comments         Comment[]
  followers        Follower[]
  followings       Following[]
}

model Token {
  id               Int         @id @default(autoincrement())
  digits           Int         @unique
  updatedAt        DateTime    @updatedAt
  createdAt        DateTime    @default(now())
  host_id          Int         @unique
  host             User        @relation(fields: [host_id], references: [id], onDelete: Cascade)
}

model Board {
  id                Int           @id @default(autoincrement())
  title             String     
  genre             String?
  avatar            String?  
  updatedAt         DateTime      @updatedAt
  createdAt         DateTime      @default(now())
  isPrivate         Boolean?      @default(false)
  description       String        @db.LongText @default("")
  posts             Post[]
  folllowers        Follower[]
  host_id           Int  
  host              User          @relation(fields: [host_id], references: [id], onDelete: Cascade)
}
model Following {
  id                Int           @id @default(autoincrement()) 
  host_id           Int           @unique
  user_id           Int?          @unique
  board_id          Int?          @unique
  updatedAt         DateTime      @updatedAt
  createdAt         DateTime      @default(now())
  host              User          @relation(fields: [host_id], references: [id], onDelete: Cascade)
}
model Follower {
  id                Int           @id @default(autoincrement()) 
  host_id           Int           @unique
  user_id           Int?          @unique  
  board_id          Int?          @unique
  updatedAt         DateTime      @updatedAt
  createdAt         DateTime      @default(now())
  user              User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  board             Board?        @relation(fields: [board_id], references: [id], onDelete: Cascade)
}
model Post {
  id               Int            @id @default(autoincrement())
  title            String     
  avatar           String?
  description      String?        @db.LongText
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  likes            Like[]  
  comments         Comment[]  
  host_id          Int            @unique   
  board_id         Int            @unique
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  board            Board          @relation(fields: [board_id], references: [id], onDelete: Cascade)
}
model Review {
  id               Int            @id @default(autoincrement())
  title            String  
  movie            String
  description      String         @db.LongText
  genre            String?
  avatar           String? 
  score            Float?         @default(1)
  isRecommend      Boolean?       @default(true)
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  likes            Like[]  
  comments         Comment[]  
  host_id          Int            @unique
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  
}
model Like {
  id               Int            @id @default(autoincrement()) 
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  host_id          Int            @unique
  post_id          Int?           @unique
  review_id        Int?           @unique
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  post             Post?          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  review           Review?        @relation(fields: [review_id], references: [id], onDelete: Cascade)
}
model Comment {
  id               Int            @id @default(autoincrement())
  content          String?        @db.LongText
  reply_id         Int?           @default(0)      
  parent_id        Int?           @default(0)      
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  host_id          Int            @unique
  post_id          Int?           @unique
  review_id        Int?           @unique
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  post             Post?          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  review           Review?        @relation(fields: [review_id], references: [id], onDelete: Cascade)
}