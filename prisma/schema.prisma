// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"

}
model User {
  id          Int         @id @default(autoincrement())
  username    String
  userId      String?     @unique
  password    String? 
  email       String?     @unique
  name        String?
  birth       String?
  gender      String?
  location    String?
  avatar      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tokens      Token[]
  boards      Board[]
  posts       Post[]
  reviews     Review[]
}

model Token {
  id           Int         @id @default(autoincrement())
  tokenNum     Int         @unique
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int   
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Board {
  id           Int         @id @default(autoincrement())
  title        String     @unique
  intro        String
  genre        String
  avatar       String?
  follow       String?
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int   
  post         Post[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Post {
  id           Int         @id @default(autoincrement())
  title        String     
  content      String? 
  avatar       String?
  follow       String?
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int   
  board        Board        @relation(fields: [BoardID], references: [id], onDelete: Cascade)
  BoardID      Int   
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model Review {
  id           Int         @id @default(autoincrement())
  title        String  
  movieTitle   String
  genre        String
  content      String? 
  avatar       String? 
  user         User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  UserID       Int     
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}