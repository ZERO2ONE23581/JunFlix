// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
model User {
  id               Int          @id @default(autoincrement())
  userId           String       @unique
  email            String       @unique
  password         String  
  username         String? 
  name             String?
  intro            String?     
  website          String?     
  birth            String?
  language         String?
  gender           String?
  location         String?
  avatar           String?
  onPrivate        Boolean?     @default(false)
  likes            Like[]  
  posts            Post[]
  tokens           Token[]  
  boards           Board[]     
  comments         Comment[]
  followers        Follower[]
  followings       Following[]
  updatedAt        DateTime     @updatedAt
  createdAt        DateTime     @default(now())
}

model Token {
  id               Int         @id @default(autoincrement())
  digits           Int         @unique
  host_id          Int         
  updatedAt        DateTime    @updatedAt
  createdAt        DateTime    @default(now())
  host             User        @relation(fields: [host_id], references: [id], onDelete: Cascade)
}

model Board {
  id                Int           @id @default(autoincrement())
  title             String     
  host_id           Int  
  cover             String?  
  updatedAt         DateTime      @updatedAt
  genre             String?       @default("") 
  createdAt         DateTime      @default(now())
  onPrivate         Boolean?      @default(false)
  description       String        @default("") @db.LongText
  posts             Post[]
  followers         Follower[]
  host              User          @relation(fields: [host_id], references: [id], onDelete: Cascade)
}
model Following {
  id                Int           @id @default(autoincrement()) 
  host_id           Int           
  user_id           Int?          
  board_id          Int?          
  updatedAt         DateTime      @updatedAt
  createdAt         DateTime      @default(now())
  host              User          @relation(fields: [host_id], references: [id], onDelete: Cascade)
}
model Follower {
  id                Int           @id @default(autoincrement()) 
  host_id           Int           
  user_id           Int?            
  board_id          Int?          
  updatedAt         DateTime      @updatedAt
  createdAt         DateTime      @default(now())
  user              User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  board             Board?        @relation(fields: [board_id], references: [id], onDelete: Cascade)
}
model Post {
  id               Int            @id @default(autoincrement())
  title            String
  host_id          Int               
  board_id         Int?           @default(0)        
  post_image       String?
  description      String?        @db.LongText
  hashtags         String?        
  pageLink         String?        
  onPrivate        Boolean?       @default(false)
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  likes            Like[]  
  comments         Comment[]  
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  board            Board?          @relation(fields: [board_id], references: [id], onDelete: Cascade)
}
model Like {
  id               Int            @id @default(autoincrement()) 
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  host_id          Int            
  post_id          Int?           
  comment_id       Int?           
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  post             Post?          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment          Comment?       @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  
}
model Comment {
  id               Int            @id @default(autoincrement())
  og_id            Int           @default(0)      
  reply_id         Int           @default(0)      
  text             String?        @db.LongText
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  host_id          Int            
  post_id          Int       
  likes            Like[]      
  host             User           @relation(fields: [host_id], references: [id], onDelete: Cascade)
  post             Post?          @relation(fields: [post_id], references: [id], onDelete: Cascade)
}